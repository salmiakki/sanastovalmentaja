const wordSets = {
    numbers0To10: {
        title: "0‚Äì10",
        prompts: {
            0: "nolla",
            1: "yksi",
            2: "kaksi",
            3: "kolme",
            4: "nelj√§",
            5: "viisi",
            6: "kuusi",
            7: "seitsem√§n",
            8: "kahdeksan",
            9: "yhdeks√§n",
            10: "kymmenen",
        },
    },
    numbers0To30: {
        title: "0‚Äì30",
        prompts: {
            0: "nolla",
            1: "yksi",
            2: "kaksi",
            3: "kolme",
            4: "nelj√§",
            5: "viisi",
            6: "kuusi",
            7: "seitsem√§n",
            8: "kahdeksan",
            9: "yhdeks√§n",
            10: "kymmenen",
            11: "yksi_toista",
            12: "kaksi_toista",
            13: "kolme_toista",
            14: "nelj√§_toista",
            15: "viisi_toista",
            16: "kuusi_toista",
            17: "seitsem√§n_toista",
            18: "kahdeksan_toista",
            19: "yhdeks√§n_toista",
            20: "kaksi_kymment√§",
            21: "kaksi_kymment√§_yksi",
            22: "kaksi_kymment√§_kaksi",
            23: "kaksi_kymment√§_kolme",
            24: "kaksi_kymment√§_nelj√§",
            25: "kaksi_kymment√§_viisi",
            26: "kaksi_kymment√§_kuusi",
            27: "kaksi_kymment√§_seitsem√§n",
            28: "kaksi_kymment√§_kahdeksan",
            29: "kaksi_kymment√§_yhdeks√§n",
            30: "kolme_kymment√§",
        },
    },
    numbers0To100: {
        title: "0‚Äì100",
        prompts: {
            0: "nolla",
            1: "yksi",
            2: "kaksi",
            3: "kolme",
            4: "nelj√§",
            5: "viisi",
            6: "kuusi",
            7: "seitsem√§n",
            8: "kahdeksan",
            9: "yhdeks√§n",
            10: "kymmenen",
            11: "yksi_toista",
            12: "kaksi_toista",
            13: "kolme_toista",
            14: "nelj√§_toista",
            15: "viisi_toista",
            16: "kuusi_toista",
            17: "seitsem√§n_toista",
            18: "kahdeksan_toista",
            19: "yhdeks√§n_toista",
            20: "kaksi_kymment√§",
            21: "kaksi_kymment√§_yksi",
            22: "kaksi_kymment√§_kaksi",
            23: "kaksi_kymment√§_kolme",
            24: "kaksi_kymment√§_nelj√§",
            25: "kaksi_kymment√§_viisi",
            26: "kaksi_kymment√§_kuusi",
            27: "kaksi_kymment√§_seitsem√§n",
            28: "kaksi_kymment√§_kahdeksan",
            29: "kaksi_kymment√§_yhdeks√§n",
            30: "kolme_kymment√§",
            31: "kolme_kymment√§_yksi",
            32: "kolme_kymment√§_kaksi",
            33: "kolme_kymment√§_kolme",
            34: "kolme_kymment√§_nelj√§",
            35: "kolme_kymment√§_viisi",
            36: "kolme_kymment√§_kuusi",
            37: "kolme_kymment√§_seitsem√§n",
            38: "kolme_kymment√§_kahdeksan",
            39: "kolme_kymment√§_yhdeks√§n",
            40: "nelj√§_kymment√§",
            41: "nelj√§_kymment√§_yksi",
            42: "nelj√§_kymment√§_kaksi",
            43: "nelj√§_kymment√§_kolme",
            44: "nelj√§_kymment√§_nelj√§",
            45: "nelj√§_kymment√§_viisi",
            46: "nelj√§_kymment√§_kuusi",
            47: "nelj√§_kymment√§_seitsem√§n",
            48: "nelj√§_kymment√§_kahdeksan",
            49: "nelj√§_kymment√§_yhdeks√§n",
            50: "viisi_kymment√§",
            51: "viisi_kymment√§_yksi",
            52: "viisi_kymment√§_kaksi",
            53: "viisi_kymment√§_kolme",
            54: "viisi_kymment√§_nelj√§",
            55: "viisi_kymment√§_viisi",
            56: "viisi_kymment√§_kuusi",
            57: "viisi_kymment√§_seitsem√§n",
            58: "viisi_kymment√§_kahdeksan",
            59: "viisi_kymment√§_yhdeks√§n",
            60: "kuusi_kymment√§",
            61: "kuusi_kymment√§_yksi",
            62: "kuusi_kymment√§_kaksi",
            63: "kuusi_kymment√§_kolme",
            64: "kuusi_kymment√§_nelj√§",
            65: "kuusi_kymment√§_viisi",
            66: "kuusi_kymment√§_kuusi",
            67: "kuusi_kymment√§_seitsem√§n",
            68: "kuusi_kymment√§_kahdeksan",
            69: "kuusi_kymment√§_yhdeks√§n",
            70: "seitsem√§n_kymment√§",
            71: "seitsem√§n_kymment√§_yksi",
            72: "seitsem√§n_kymment√§_kaksi",
            73: "seitsem√§n_kymment√§_kolme",
            74: "seitsem√§n_kymment√§_nelj√§",
            75: "seitsem√§n_kymment√§_viisi",
            76: "seitsem√§n_kymment√§_kuusi",
            77: "seitsem√§n_kymment√§_seitsem√§n",
            78: "seitsem√§n_kymment√§_kahdeksan",
            79: "seitsem√§n_kymment√§_yhdeks√§n",
            80: "kahdeksan_kymment√§",
            81: "kahdeksan_kymment√§_yksi",
            82: "kahdeksan_kymment√§_kaksi",
            83: "kahdeksan_kymment√§_kolme",
            84: "kahdeksan_kymment√§_nelj√§",
            85: "kahdeksan_kymment√§_viisi",
            86: "kahdeksan_kymment√§_kuusi",
            87: "kahdeksan_kymment√§_seitsem√§n",
            88: "kahdeksan_kymment√§_kahdeksan",
            89: "kahdeksan_kymment√§_yhdeks√§n",
            90: "yhdeks√§n_kymment√§",
            91: "yhdeks√§n_kymment√§_yksi",
            92: "yhdeks√§n_kymment√§_kaksi",
            93: "yhdeks√§n_kymment√§_kolme",
            94: "yhdeks√§n_kymment√§_nelj√§",
            95: "yhdeks√§n_kymment√§_viisi",
            96: "yhdeks√§n_kymment√§_kuusi",
            97: "yhdeks√§n_kymment√§_seitsem√§n",
            98: "yhdeks√§n_kymment√§_kahdeksan",
            99: "yhdeks√§n_kymment√§_yhdeks√§n",
            100: "sata",
        },
    },
    // numbers0To10Puhekieli: {
    //     title: "0‚Äì10 (Puhekieli)",
    //     prompts: {
    //         0: "nolla",
    //         1: "yks",
    //         2: "kaks",
    //         3: "kolme",
    //         4: "nelj√§",
    //         5: "viis",
    //         6: "kuus",
    //         7: "seittem√§n",
    //         8: "kaheksan",
    //         9: "yheks√§n",
    //         10: "kymmenen",
    //     },
    // },
    months: {
        title: "Months",
        prompts: {
            January: "tammikuu",
            February: "helmikuu",
            March: "maaliskuu",
            April: "huhtikuu",
            May: "toukokuu",
            June: "kes√§kuu",
            July: "hein√§kuu",
            August: "elokuu",
            September: "syyskuu",
            October: "lokakuu",
            November: "marraskuu",
            December: "joulukuu",
        },
    },
    // monthsRu: {
    //     title: "–ú–µ—Å—è—Ü—ã üîä",
    //     prompts: {
    //         —è–Ω–≤–∞—Ä—å: "tammikuu",
    //         —Ñ–µ–≤—Ä–∞–ª—å: "helmikuu",
    //         –º–∞—Ä—Ç: "maaliskuu",
    //         –∞–ø—Ä–µ–ª—å: "huhtikuu",
    //         –º–∞–π: "toukokuu",
    //         –∏—é–Ω—å: "kes√§kuu",
    //         –∏—é–ª—å: "hein√§kuu",
    //         –∞–≤–≥—É—Å—Ç: "elokuu",
    //         —Å–µ–Ω—Ç—è–±—Ä—å: "syyskuu",
    //         –æ–∫—Ç—è–±—Ä—å: "lokakuu",
    //         –Ω–æ—è–±—Ä—å: "marraskuu",
    //         –¥–µ–∫–∞–±—Ä—å: "joulukuu",
    //     },
    // },
    daysOfTheWeek: {
        title: "Days of the week",
        prompts: {
            Monday: "maanantai",
            Tuesday: "tiistai",
            Wednesday: "keskiviikko",
            Thursday: "torstai",
            Friday: "perjantai",
            Saturday: "lauantai",
            Sunday: "sunnuntai",
        },
    },
    familyRu: {
        title: "Perhe ‚Äì —Å–µ–º—å—è",
        prompts: {
            "–º–∞—Ç—å": "√§iti",
            "–∂–µ–Ω–∞": "vaimo",
            "–æ—Ç–µ—Ü": "is√§",
            "–º—É–∂, –º—É–∂—á–∏–Ω–∞": "mies",
            "–¥–µ—Ç–∏": "lapset",
            "–º–ª–∞–¥–µ–Ω–µ—Ü": "vauva, taapero",
            "—Å—ã–Ω, –º–∞–ª—å—á–∏–∫": "poika",
            "–¥–æ—á—å": "tyt√§r",
            "—Å–µ—Å—Ç—Ä–∞": "sisko",
            "–±—Ä–∞—Ç": "veli",
            "—Ç—ë—Ç—è": "t√§ti",
            "–¥—è–¥—è": "set√§",
            "–¥—è–¥—è –ø–æ –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–æ–π –ª–∏–Ω–∏–∏": "eno",
            "–¥–≤–æ—é—Ä–æ–¥–Ω—ã–µ –±—Ä–∞—Ç, —Å–µ—Å—Ç—Ä–∞ ": "serkku",
            "–ø–ª–µ–º—è–Ω–Ω–∏–∫": "siskonpoika, siskontyt√§r, veljenpoika, veljentyt√§r",
            "—Ç—ë—â–∞, —Å–≤–µ–∫—Ä–æ–≤—å": "anoppi",
            "—Ç–µ—Å—Ç—å, —Å–≤—ë–∫—Ä": "appi",
            "–±–∞–±—É—à–∫–∞": "iso√§iti, mummo, mummu",
            "–¥–µ–¥—É—à–∫–∞": "isois√§, ukki, vaari, pappa",
            "–≤–Ω—É–∫": "lapsenlapsi (-et)",
            "–∫—Ä—ë—Å—Ç–Ω—ã–µ": "kummi- ...t√§ti, set√§, tyt√§r, poika",
            "¬´–Ω–æ–≤–∞—è¬ª —Å–µ–º—å—è": "uusperhe",
            "–æ—Ç—á–∏–º, –º–∞—á–µ—Ö–∞": "is√§puoli, √§itipuoli",
            "—Å–≤–æ–¥–Ω—ã–µ —Å–µ—Å—Ç—Ä–∞, –±—Ä–∞—Ç": "siskopuoli, velipuoli",
            "–æ–ø–µ–∫—É–Ω": "huoltaja",
            "–±–æ–π—Ñ—Ä–µ–Ω–¥, –≥—ë—Ä–ª—Ñ—Ä–µ–Ω–¥": "poikayst√§v√§, tytt√∂yst√§v√§"
        }
    },  
    petsRu: {
        title: "Lemmikit ‚Äì –¥–æ–º–∞—à–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω—ã–µ",
        prompts: {
            –∫–æ—à–∫–∞: "kissa",
            —Å–æ–±–∞–∫–∞: "koira",
            –∫—Ä–æ–ª–∏–∫: "kani",
            —á–µ—Ä–µ–ø–∞—Ö–∞: "kilpikonna",
            —Ö–æ–º—è–∫: "hamsteri",
            "–º–æ—Ä—Å–∫–∞—è —Å–≤–∏–Ω–∫–∞": "marsu",
            –∫—Ä—ã—Å–∞: "rotta",
            –ø–µ—Å—á–∞–Ω–∫–∞: "gerbiili",
            –ø–æ–ø—É–≥–∞–π: "papukaija",
            —Ä—ã–±–∫–∏: "kalat",
            –∑–º–µ—è: "k√§√§rme",
            —è—â–µ—Ä–∏—Ü–∞: "lisko",
            —É–ª–∏—Ç–∫–∞: "kotilo",
            –º–∏–Ω–∏–ø–∏–≥: "minisika, minipossu",
            –ø–∞—É–∫: "h√§m√§h√§kki",
            —Ö–æ—Ä—ë–∫: "fretti",
            –µ–Ω–æ—Ç: "pesukarhu",
            –ª–∏—Å–∞: "kettu",
        },
    },
};

const sleepAfterPromptMs = 4000;
const sleepAfterAnswerMs = 1500;

const wordSetMap = new Map(Object.entries(wordSets));

const app = Vue.createApp({
    data() {
        return {
            prompt: "Choose a word set below to start",
            answer: "ü§î",
            wordSetMap: wordSetMap,
            currentWordSetName: null,
            currentWordSet: null,
            title: "Sanastovalmentaja üá´üáÆ",
        };
    },
    methods: {
        getPrompt() {
            const map = new Map(Object.entries(this.currentWordSet.prompts));
            let keys = Array.from(map.keys());
            let newPrompt;
            let attempt = 1;
            do {
                console.debug(`Attempting to get prompt, attempt ${attempt}...`);
                newPrompt = keys[Math.floor(Math.random() * keys.length)];
            } while (newPrompt == this.prompt);
            return newPrompt;
        },
        getAnswer(x) {
            return this.currentWordSet.prompts[x];
        },
        sleep(ms) {
            return new Promise((resolve) => setTimeout(resolve, ms));
        },
        change(x) {
            // clearInterval(this.timer);
            this.currentWordSetName = x;
            this.currentWordSet = wordSetMap.get(x);
            this.title = wordSetMap.get(x).title;
        },
        speak(text, language = null, rate = null) {
            console.debug(`speak(text=${text}, language=${language}, rate = ${rate})`);
            let utterance = new SpeechSynthesisUtterance(text.replace("_", ""));
            if (language !== null) {
                utterance.lang = language;
            }
            if (rate !== null) {
                utterance.rate = rate;
            }
            speechSynthesis.speak(utterance);
        },
        sayInFinnish(text) {
            this.speak(text, "fi-FI", 0.8);
        },
    },
    async mounted() {
        this.timer = setInterval(async () => {
            if (this.currentWordSet === null) {
                return;
            }
            nextPrompt = this.getPrompt();
            const shouldTalk = true;
            console.log(`shouldTalk = '${shouldTalk}'.`);
            if (shouldTalk) {
                const promptToSpeak = nextPrompt.replace("_", "");
                this.speak(promptToSpeak, this.currentWordSetName.toLowerCase().endsWith("ru") ? "ru-RU" : "en-GB");
            }

            console.log(`Got prompt: '${nextPrompt}'.`);
            this.answer = "ü§î";
            this.prompt = nextPrompt;
            const answer = this.getAnswer(nextPrompt);
            console.log(`Got answer: '${answer}'.`);

            console.debug(`Sleeping for ${sleepAfterPromptMs} ms...`);
            await this.sleep(sleepAfterPromptMs);
            this.answer = answer;

            if (shouldTalk) {
                this.sayInFinnish(answer.replace("_", ""));
            }

            console.debug("Set answer.");
            console.debug(`Sleeping for ${sleepAfterAnswerMs} ms...`);
            await this.sleep(sleepAfterAnswerMs);
        }, sleepAfterPromptMs + sleepAfterAnswerMs);
    },
    beforeDestroy() {
        clearInterval(this.timer);
    },
});

app.mount("#app");

// –∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è
